import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useNavigate } from "react-router-dom";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import NotificationBell from "@/components/NotificationBell";
import PatientProfile from "@/components/PatientProfile";
import { useAuth } from "@/contexts/AuthContext";
import { getExaminationsByCustomer } from "@/api/examinationApi";
import { useEffect } from "react";
import { MessageCircle } from "lucide-react";
import { toast } from "@/components/ui/use-toast";
import { Star } from "lucide-react";




const UserDashboard = () => {
  const navigate = useNavigate();
  const [showDashboard, setShowDashboard] = useState(false);
  const [showPatientProfile, setShowPatientProfile] = useState(false);
  const [testResults, setTestResults] = useState<any[]>([]);
  const [openFeedback, setOpenFeedback] = useState(false);
  const [rating, setRating] = useState(0);


  const { user } = useAuth();

  useEffect(() => {
    if (user?.id) {
      getExaminationsByCustomer(user.id).then(res => {
        setTestResults(res.data.data || []);
      });
    }
  }, [user]);

  // Mock user data
  const userData = {
    name: "Nguy·ªÖn Th·ªã Mai",
    membershipLevel: "VIP",
    email: "mai.nguyen@email.com",
    phone: "0901234567",
    memberSince: "2024-01-15"
  };

  const services = [
    {
      icon: "‚ô°",
      title: "IUI - Thu tinh trong t·ª≠ cung",
      description: "Ph∆∞∆°ng ph√°p h·ªó tr·ª£ sinh s·∫£n ƒë∆°n gi·∫£n, ph√π h·ª£p v·ªõi c√°c tr∆∞·ªùng h·ª£p v√¥ sinh nh·∫π.",
      buttonText: "ƒêƒÉng k√Ω d·ªãch v·ª•",
      color: "text-pink-500",
      available: true
    },
    {
      icon: "‚öï",
      title: "IVF - Thu tinh ·ªëng nghi·ªám",
      description: "C√¥ng ngh·ªá ti√™n ti·∫øn nh·∫•t hi·ªán t·∫°i, ph√π h·ª£p v·ªõi nhi·ªÅu tr∆∞·ªùng h·ª£p v√¥ sinh.",
      buttonText: "ƒêƒÉng k√Ω d·ªãch v·ª•", 
      color: "text-blue-500",
      available: true
    },
    {
      icon: "üî¨",
      title: "T∆∞ v·∫•n chuy√™n s√¢u",
      description: "D·ªãch v·ª• t∆∞ v·∫•n to√†n di·ªán v·ªÅ t√¨nh tr·∫°ng sinh s·∫£n v√† k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã.",
      buttonText: "ƒêƒÉng k√Ω d·ªãch v·ª•",
      color: "text-green-500",
      available: true
    }
  ];

  const whyChooseUs = [
    {
      icon: "üë®‚Äç‚öïÔ∏è",
      title: "ƒê·ªôi ng≈© chuy√™n gia",
      description: "B√°c sƒ© v√† chuy√™n gia h√†ng ƒë·∫ßu v·ªÅ sinh s·∫£n t·∫°i Vi·ªát Nam v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám."
    },
    {
      icon: "üè•",
      title: "C√¥ng ngh·ªá hi·ªán ƒë·∫°i",
      description: "Trang thi·∫øt b·ªã y t·∫ø hi·ªán ƒë·∫°i nh·∫•t, ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng ƒëi·ªÅu tr·ªã t·ªët nh·∫•t."
    },
    {
      icon: "üí∞",
      title: "T·ª∑ l·ªá th√†nh c√¥ng cao",
      description: "T·ª∑ l·ªá th√†nh c√¥ng cao trong c√°c ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã hi·∫øm mu·ªôn."
    },
    {
      icon: "‚ô°",
      title: "ChƒÉm s√≥c t·∫≠n t√¨nh",
      description: "ChƒÉm s√≥c t·∫≠n t√¨nh v√† h·ªó tr·ª£ t√¢m l√Ω trong su·ªët qu√° tr√¨nh ƒëi·ªÅu tr·ªã."
    }
  ];

  const appointments = [
    {
      id: 1,
      date: "2024-06-20",
      time: "09:00",
      doctor: "BS. Tr·∫ßn VƒÉn Nam",
      service: "IVF - Thu tinh ·ªëng nghi·ªám",
      status: "confirmed",
      statusText: "ƒê√£ x√°c nh·∫≠n"
    },
    {
      id: 2,
      date: "2024-06-15",
      time: "14:30",
      doctor: "BS. Nguy·ªÖn Th·ªã Mai",
      service: "T∆∞ v·∫•n v√† kh√°m s√†ng l·ªçc",
      status: "completed",
      statusText: "Ho√†n th√†nh"
    }
  ];

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'confirmed':
        return 'bg-blue-100 text-blue-800';
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'cancelled':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }

    
  };
  function StarRating({ rating, setRating }: { rating: number; setRating: (value: number) => void }) {
  return (
    <div className="flex space-x-1">
      {[1, 2, 3, 4, 5].map((star) => (
        <Star
          key={star}
          className={`w-6 h-6 cursor-pointer ${star <= rating ? "text-yellow-400 fill-yellow-400" : "text-gray-300"}`}
          onClick={() => setRating(star)}
        />
      ))}
    </div>
  );
}

  return (
    <div className="min-h-screen">
      {/* Hero Section v·ªõi Avatar */}
      <section className="bg-gradient-to-r from-primary/5 to-primary/10 py-16">
        <div className="container mx-auto px-4">
          <div className="text-center mb-8">
            <div className="flex justify-between items-center mb-6">
              <div></div>
              <NotificationBell />
            </div>
            
            <Dialog open={showDashboard} onOpenChange={setShowDashboard}>
              <DialogTrigger asChild>
                <div className="cursor-pointer inline-block">
                  <Avatar className="h-20 w-20 mx-auto mb-4 hover:ring-4 hover:ring-primary/20 transition-all">
                    <AvatarImage src="/placeholder.svg" alt={userData.name} />
                    <AvatarFallback className="text-xl bg-primary text-primary-foreground">
                      {userData.name.split(' ').map(n => n[0]).join('')}
                    </AvatarFallback>
                  </Avatar>
                </div>
              </DialogTrigger>
              
              <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>Dashboard Kh√°ch h√†ng</DialogTitle>
                  <DialogDescription>
                    Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n v√† l·ªãch h·∫πn c·ªßa b·∫°n
                  </DialogDescription>
                </DialogHeader>
                
                <div className="grid lg:grid-cols-3 gap-6 mt-6">
                  {/* Profile Card */}
                  <Card>
                    <CardHeader>
                      <CardTitle>Th√¥ng tin c√° nh√¢n</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <p className="text-sm text-muted-foreground">H·ªç v√† t√™n</p>
                        <p className="font-medium">{userData.name}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">Email</p>
                        <p className="font-medium">{userData.email}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">S·ªë ƒëi·ªán tho·∫°i</p>
                        <p className="font-medium">{userData.phone}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">Kh√°ch h√†ng t·ª´</p>
                        <p className="font-medium">15/01/2024</p>
                      </div>
                      <Button 
                        variant="outline" 
                        className="w-full"
                        onClick={() => {
                          setShowDashboard(false);
                          navigate('/update-profile');
                        }}
                      >
                        C·∫≠p nh·∫≠t th√¥ng tin
                      </Button>
                    </CardContent>
                  </Card>

                  {/* Quick Actions */}
                  <Card>
                    <CardHeader>
                      <CardTitle>Thao t√°c nhanh</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <Button 
                        className="w-full bg-primary hover:bg-primary/90"
                        onClick={() => {
                          setShowDashboard(false);
                          navigate('/booking');
                        }}
                      >
                        ƒê·∫∑t l·ªãch h·∫πn m·ªõi
                      </Button>
                      <Button 
                        variant="outline" 
                        className="w-full"
                        onClick={() => {
                          setShowDashboard(false);
                          setShowPatientProfile(true);
                        }}
                      >
                        H·ªì s∆° ƒëi·ªÅu tr·ªã
                      </Button>
                      <Button 
                        variant="outline" 
                        className="w-full"
                        onClick={() => {
                          setShowDashboard(false);
                          navigate('/payment');
                        }}
                      >
                        Thanh to√°n d·ªãch v·ª•
                      </Button>
                    </CardContent>
                  </Card>

                  {/* Stats */}
                  <Card>
                    <CardHeader>
                      <CardTitle>Th·ªëng k√™</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-muted-foreground">T·ªïng l·ªãch h·∫πn</span>
                        <span className="text-2xl font-bold text-primary">12</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-muted-foreground">L·ªãch s·∫Øp t·ªõi</span>
                        <span className="text-2xl font-bold text-blue-500">1</span>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-muted-foreground">K·∫øt qu·∫£ x√©t nghi·ªám</span>
                        <span className="text-2xl font-bold text-green-500">5</span>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Appointments */}
                <Card className="mt-6">
                  <CardHeader>
                    <CardTitle>L·ªãch h·∫πn c·ªßa t√¥i</CardTitle>
                    <CardDescription>Danh s√°ch c√°c l·ªãch h·∫πn g·∫ßn ƒë√¢y v√† s·∫Øp t·ªõi</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {appointments.map((appointment) => (
                        <div key={appointment.id} className="flex items-center justify-between p-4 border rounded-lg">
                          <div className="flex-1">
                            <div className="flex items-center space-x-2 mb-1">
                              <span className="font-medium">{appointment.service}</span>
                              <Badge className={getStatusColor(appointment.status)}>
                                {appointment.statusText}
                              </Badge>
                            </div>
                            <p className="text-sm text-muted-foreground">
                              {appointment.doctor} ‚Ä¢ {appointment.date} ‚Ä¢ {appointment.time}
                            </p>
                          </div>
                          <div className="flex space-x-2">
                            {appointment.status === 'confirmed' && (
                              <>
                                <Button variant="outline" size="sm">
                                  ƒê·ªïi l·ªãch
                                </Button>
                                <Button variant="outline" size="sm">
                                  H·ªßy
                                </Button>
                              </>
                            )}
                            {appointment.status === 'completed' && (
                              <Button variant="outline" size="sm">
                                Xem k·∫øt qu·∫£
                              </Button>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* Test Results */}
                <Card className="mt-6">
                  <CardHeader>
                    <CardTitle>K·∫øt qu·∫£ x√©t nghi·ªám g·∫ßn ƒë√¢y</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {testResults.map((result) => (
                        <div key={result.id} className="flex items-center justify-between p-4 border rounded-lg">
                          <div className="flex-1">
                            <p className="font-medium">{result.type}</p>
                            <p className="text-sm text-muted-foreground">
                              {result.doctor} ‚Ä¢ {result.date}
                            </p>
                          </div>
                          <div className="flex items-center space-x-4">
                            <Badge className="bg-green-100 text-green-800">
                              {result.result}
                            </Badge>
                            <Button variant="outline" size="sm">
                              Xem chi ti·∫øt
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </DialogContent>
            </Dialog>

            <h1 className="text-3xl md:text-4xl font-bold mb-4">
              Ch√†o m·ª´ng tr·ªü l·∫°i, <span className="text-primary">{userData.name}</span>!
            </h1>
            <div className="flex items-center justify-center space-x-2 mb-6">
              <Badge className="bg-primary text-primary-foreground px-3 py-1">
                Th√†nh vi√™n {userData.membershipLevel}
              </Badge>
            </div>
            <p className="text-lg text-muted-foreground mb-6 max-w-2xl mx-auto">
              Ch√∫ng t√¥i r·∫•t vui ƒë∆∞·ª£c ƒë·ªìng h√†nh c√πng b·∫°n tr√™n h√†nh tr√¨nh mang thai h·∫°nh ph√∫c.
            </p>
          </div>

          {/* Quick Actions */}
          <div className="grid md:grid-cols-4 gap-4 max-w-4xl mx-auto">
            <Button 
              size="lg"
              onClick={() => navigate('/booking')}
              className="bg-primary hover:bg-primary/90 h-16"
            >
              üìÖ<br />ƒê·∫∑t l·ªãch m·ªõi
            </Button>
            <Button 
              variant="outline" 
              size="lg"
              onClick={() => setShowPatientProfile(true)}
              className="h-16"
            >
              üìã<br />H·ªì s∆°
            </Button>
            <Button 
              variant="outline" 
              size="lg"
              onClick={() => navigate('/payment')}
              className="h-16"
            >
              üí≥<br />Thanh to√°n
            </Button>
          </div>
        </div>
      </section>

      {/* Services Section */}
      <section className="py-20">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold mb-4">D·ªãch v·ª• ƒëi·ªÅu tr·ªã hi·∫øm mu·ªôn</h2>
            <p className="text-muted-foreground">V·ªõi t∆∞ c√°ch th√†nh vi√™n, b·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω tr·ª±c ti·∫øp c√°c d·ªãch v·ª•</p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8">
            {services.map((service, index) => (
              <Card key={index} className="text-center hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className={`text-4xl mb-4 ${service.color}`}>
                    {service.icon}
                  </div>
                  <CardTitle className="text-xl mb-2">{service.title}</CardTitle>
                  <CardDescription>{service.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button 
                    className="w-full bg-primary hover:bg-primary/90"
                    onClick={() => navigate('/booking')}
                    disabled={!service.available}
                  >
                    {service.buttonText}
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Why Choose Us Section */}
      <section className="py-20 bg-secondary/20">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold mb-4">T·∫°i sao ch·ªçn ch√∫ng t√¥i?</h2>
          </div>
          
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {whyChooseUs.map((item, index) => (
              <div key={index} className="text-center">
                <div className="text-4xl mb-4">{item.icon}</div>
                <h3 className="text-lg font-semibold mb-2">{item.title}</h3>
                <p className="text-muted-foreground text-sm">{item.description}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-primary text-primary-foreground">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            Ti·∫øp t·ª•c h√†nh tr√¨nh c·ªßa b·∫°n
          </h2>
          <p className="text-xl mb-8 opacity-90">
            H√£y ƒë·ªÉ ch√∫ng t√¥i ti·∫øp t·ª•c ƒë·ªìng h√†nh v·ªõi b·∫°n tr√™n h√†nh tr√¨nh ƒë·∫øn v·ªõi h·∫°nh ph√∫c l√†m cha m·∫π.
          </p>
          <Button 
            size="lg" 
            variant="secondary"
            onClick={() => navigate('/booking')}
            className="text-lg px-8 py-3"
          >
            ƒê·∫∑t l·ªãch t∆∞ v·∫•n ngay
          </Button>
        </div>
      </section>

      {/* Patient Profile Modal */}
      <PatientProfile
        patient={userData}
        isOpen={showPatientProfile}
        onClose={() => setShowPatientProfile(false)}
        isReadOnly={true}
      />
 <>
    {/* N√∫t Feedback */}
    <div className="fixed bottom-6 right-6 z-50">
      <Button 
        variant="outline" 
        size="icon"
        className="rounded-full shadow-lg w-14 h-14 bg-white hover:bg-muted"
        onClick={() => setOpenFeedback(true)}
      >
        <MessageCircle className="w-6 h-6 text-primary" />
      </Button>
    </div>

    {/* H·ªôp tho·∫°i Feedback */}
    <Dialog open={openFeedback} onOpenChange={setOpenFeedback}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Ph·∫£n h·ªìi c·ªßa b·∫°n</DialogTitle>
        </DialogHeader>
        <form
          className="space-y-4"
          onSubmit={(e) => {
            e.preventDefault();
            if (rating === 0) {
              toast({
                title: "Vui l√≤ng ƒë√°nh gi√° tr∆∞·ªõc khi g·ª≠i.",
                variant: "destructive",
              });
              return;
            }
            toast({
              title: "G·ª≠i ph·∫£n h·ªìi th√†nh c√¥ng!",
              description: `B·∫°n ƒë√£ ƒë√°nh gi√° ${rating} sao. C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p √Ω ki·∫øn.`,
              variant: "default",
            });
            setOpenFeedback(false);
            setRating(0); // Reset sao
          }}
        >
          {/* ƒê√°nh gi√° sao */}
          <div>
            <label className="text-sm font-medium">ƒê√°nh gi√° c·ªßa b·∫°n:</label>
            <StarRating rating={rating} setRating={setRating} />
          </div>

          {/* Ph·∫£n h·ªìi n·ªôi dung */}
          <textarea 
            className="w-full min-h-[120px] p-3 border rounded-md focus:outline-none focus:ring focus:ring-primary"
            placeholder="Nh·∫≠p ph·∫£n h·ªìi c·ªßa b·∫°n..."
            required
          />

          <Button type="submit" className="w-full bg-primary text-white hover:bg-primary/90">
            G·ª≠i ph·∫£n h·ªìi
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  </>


    </div>
  );
};

export default UserDashboard;
