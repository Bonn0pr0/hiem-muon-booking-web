import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format } from "date-fns";
import { vi } from "date-fns/locale";
import { CalendarIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { useToast } from "@/hooks/use-toast";

const Booking = () => {
  const { toast } = useToast();
  const [selectedDate, setSelectedDate] = useState<Date>();
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    email: '',
    doctor: '',
    service: '',
    time: '',
    notes: ''
  });

  const doctors = [
    { id: 'dr1', name: 'BS. Tr·∫ßn VƒÉn Nam', specialty: 'Chuy√™n khoa S·∫£n Ph·ª• khoa' },
    { id: 'dr2', name: 'BS. Nguy·ªÖn Th·ªã Mai', specialty: 'Chuy√™n khoa Hi·∫øm mu·ªôn' },
    { id: 'dr3', name: 'BS. L√™ Minh Ho√†ng', specialty: 'Chuy√™n khoa IVF' },
    { id: 'dr4', name: 'BS. Ph·∫°m Th·ªã Lan', specialty: 'Chuy√™n khoa N·ªôi ti·∫øt' }
  ];

  const services = [
    'IUI - Thu tinh trong t·ª≠ cung',
    'IVF - Thu tinh ·ªëng nghi·ªám c∆° b·∫£n',
    'ICSI - Ti√™m tinh tr√πng v√†o b√†o t∆∞∆°ng tr·ª©ng',
    'PGT-A - Ch·∫©n ƒëo√°n di truy·ªÅn ti·ªÅn l√†m t·ªï',
    'T∆∞ v·∫ßn v√† kh√°m s√†ng l·ªçc',
    'ƒê√¥ng l·∫°nh ph√¥i/tr·ª©ng'
  ];

  const timeSlots = [
    '07:00', '08:00', '09:00', '10:00', '11:00',
    '13:00', '14:00', '15:00', '16:00', '17:00'
  ];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedDate || !formData.name || !formData.phone || !formData.doctor || !formData.service || !formData.time) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc",
        variant: "destructive"
      });
      return;
    }

    toast({
      title: "ƒê·∫∑t l·ªãch th√†nh c√¥ng",
      description: `ƒê√£ ƒë·∫∑t l·ªãch kh√°m ng√†y ${format(selectedDate, 'dd/MM/yyyy', { locale: vi })} l√∫c ${formData.time}`,
    });

    // Reset form
    setFormData({
      name: '',
      phone: '',
      email: '',
      doctor: '',
      service: '',
      time: '',
      notes: ''
    });
    setSelectedDate(undefined);
  };

  const handleChange = (name: string, value: string) => {
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  return (
    <div className="min-h-screen bg-secondary/10 py-8">
      <div className="container mx-auto px-4">
        <div className="max-w-2xl mx-auto">
          <div className="text-center mb-8">
            <h1 className="text-3xl md:text-4xl font-bold mb-4">ƒê·∫∑t l·ªãch h·∫πn</h1>
            <p className="text-muted-foreground">
              ƒê·∫∑t l·ªãch kh√°m v·ªõi c√°c chuy√™n gia h√†ng ƒë·∫ßu v·ªÅ hi·∫øm mu·ªôn
            </p>
          </div>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <CalendarIcon className="w-5 h-5 text-primary" />
                <span>Th√¥ng tin ƒë·∫∑t l·ªãch</span>
              </CardTitle>
              <CardDescription>
                Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ ƒë·∫∑t l·ªãch h·∫πn
              </CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Personal Information */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold flex items-center space-x-2">
                    <span>üë§</span>
                    <span>Th√¥ng tin c√° nh√¢n</span>
                  </h3>
                  
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="name">H·ªç v√† t√™n *</Label>
                      <Input
                        id="name"
                        placeholder="Nh·∫≠p h·ªç v√† t√™n"
                        value={formData.name}
                        onChange={(e) => handleChange('name', e.target.value)}
                        required
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i *</Label>
                      <Input
                        id="phone"
                        placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                        value={formData.phone}
                        onChange={(e) => handleChange('phone', e.target.value)}
                        required
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      placeholder="Nh·∫≠p email (kh√¥ng b·∫Øt bu·ªôc)"
                      value={formData.email}
                      onChange={(e) => handleChange('email', e.target.value)}
                    />
                  </div>
                </div>

                {/* Appointment Information */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold flex items-center space-x-2">
                    <span>üìÖ</span>
                    <span>Th√¥ng tin l·ªãch h·∫πn</span>
                  </h3>
                  
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>Ng√†y h·∫πn *</Label>
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full justify-start text-left font-normal",
                              !selectedDate && "text-muted-foreground"
                            )}
                          >
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {selectedDate ? format(selectedDate, "dd/MM/yyyy", { locale: vi }) : "Ch·ªçn ng√†y h·∫πn"}
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <Calendar
                            mode="single"
                            selected={selectedDate}
                            onSelect={setSelectedDate}
                            disabled={(date) => date < new Date()}
                            initialFocus
                            className="pointer-events-auto"
                          />
                        </PopoverContent>
                      </Popover>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="time">Gi·ªù h·∫πn *</Label>
                      <Select value={formData.time} onValueChange={(value) => handleChange('time', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="Ch·ªçn gi·ªù h·∫πn" />
                        </SelectTrigger>
                        <SelectContent>
                          {timeSlots.map((time) => (
                            <SelectItem key={time} value={time}>
                              {time}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="doctor">Ch·ªçn b√°c sƒ© *</Label>
                    <Select value={formData.doctor} onValueChange={(value) => handleChange('doctor', value)}>
                      <SelectTrigger>
                        <SelectValue placeholder="Ch·ªçn b√°c sƒ©" />
                      </SelectTrigger>
                      <SelectContent>
                        {doctors.map((doctor) => (
                          <SelectItem key={doctor.id} value={doctor.id}>
                            {doctor.name} - {doctor.specialty}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="service">D·ªãch v·ª• *</Label>
                    <Select value={formData.service} onValueChange={(value) => handleChange('service', value)}>
                      <SelectTrigger>
                        <SelectValue placeholder="Ch·ªçn d·ªãch v·ª•" />
                      </SelectTrigger>
                      <SelectContent>
                        {services.map((service) => (
                          <SelectItem key={service} value={service}>
                            {service}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Notes */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold flex items-center space-x-2">
                    <span>üìù</span>
                    <span>Ghi ch√∫</span>
                  </h3>
                  
                  <div className="space-y-2">
                    <Label htmlFor="notes">Ghi ch√∫ th√™m</Label>
                    <Textarea
                      id="notes"
                      placeholder="Nh·∫≠p ghi ch√∫, tri·ªáu ch·ª©ng ho·∫∑c y√™u c·∫ßu ƒë·∫∑c bi·ªát..."
                      value={formData.notes}
                      onChange={(e) => handleChange('notes', e.target.value)}
                      rows={4}
                    />
                  </div>
                </div>

                <Button type="submit" className="w-full bg-primary hover:bg-primary/90 text-lg py-3">
                  ƒê·∫∑t l·ªãch h·∫πn
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default Booking;